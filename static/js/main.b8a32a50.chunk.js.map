{"version":3,"sources":["TodoListTask.js","TodoListTasks.js","TodoListFooter.js","TodoListTitle.js","AddNewItemForm.js","reducer.js","api.js","TodoList.js","App.js","serviceWorker.js","store.js","index.js"],"names":["TodoListTask","onIsDoneChanged","e","_this","props","changeStatus","task","id","currentTarget","checked","onTitleChanged","setState","taskTitle","value","state","editMode","title","activateEditMode","deactivateEditMode","changeTitle","onDeleteTask","deleteTask","render","containerCssClass","isDone","react_default","a","createElement","className","type","status","onChange","onBlur","autoFocus","onClick","priority","React","Component","TodoListTasks","tasksElements","tasks","map","src_TodoListTask","TodoListFooter","isHidden","onAllFilterClick","changeFilter","onCompletedFilterClick","onActiveFilterClick","onShowFiltersClick","onHideFiltersClick","classForAll","filterValue","classForCompleted","classForActive","TodoListTitle","onTitleChange","onTitleBlur","updateTodolistTitle","onDelete","AddNewItemForm","error","onAddItemClick","newText","addItem","onKeyPress","key","classNameForInput","placeholder","ADD_TASK","initialState","todolists","reducer","arguments","length","undefined","action","_objectSpread","Object","toConsumableArray","tl","todolistId","concat","newTodolist","filter","t","taskId","newTask","obj","todoListId","console","log","instance","axios","create","baseURL","withCredentials","headers","API-KEY","api","createTask","newTaskTitle","post","createTodolist","getTodolist","get","deleteTodolist","delete","updateTask","put","getTasks","updateTitleTodolist","TodoList","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","saveState","stateAsString","JSON","stringify","localStorage","setItem","restoreState","then","res","setTasks","data","items","nextTaskId","addTask","item","newFilterValue","changeTask","TodoList_objectSpread","find","catch","changeTodoListTitle","_this$props$tasks","src_TodoListTitle","src_AddNewItemForm","src_TodoListTasks","src_TodoListFooter","newTasksTitileRef","createRef","ConnectedTodolist","connect","dispatch","addTaskAC","updateTaskAC","deleteTodolistAC","deleteTaskAC","setTasksAC","App","addTodoList","todolist","addTodolist","setTodolists","src_TodoList","Fragment","ConnectedApp","setTodolistAC","addTodolistAC","Boolean","window","location","hostname","match","store","createStore","ReactDOM","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b8a32a50.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass TodoListTask extends React.Component {\n\n    onIsDoneChanged = (e) => {\n\n        this.props.changeStatus(this.props.task.id, e.currentTarget.checked ? 2 : 0);\n    }\n\n    onTitleChanged = (e) => {\n        this.setState({taskTitle:e.currentTarget.value})\n\n    }\n\n    state = {\n        editMode: false,\n        taskTitle:this.props.task.title\n    }\n\n    activateEditMode = () => {\n        this.setState({editMode: true});\n    }\n\n    deactivateEditMode= () => {\n        this.props.changeTitle(this.props.task.id, this.state.taskTitle);\n        this.setState({editMode: false});\n    }\n    onDeleteTask = () => {\n        this.props.deleteTask(this.props.task.id);\n    }\n    render = () => {\n        let containerCssClass = this.props.task.isDone ? \"todoList-task done\" : \"todoList-task\";\n        return (\n                <div className={containerCssClass}>\n                    <input type=\"checkbox\" checked={this.props.task.status === 2}\n                           onChange={this.onIsDoneChanged}/>\n                    { this.state.editMode\n                        ? <input onBlur={this.deactivateEditMode} onChange={this.onTitleChanged} autoFocus={true} value={this.taskTitle} />\n                        : <span onClick={this.activateEditMode}>{this.props.task.id} - {this.props.task.title}</span>\n                    }, priority: {this.props.task.priority} <button onClick={this.onDeleteTask}>X</button>\n                </div>\n        );\n    }\n}\n\nexport default TodoListTask;\n\n","import React from 'react';\nimport './App.css';\nimport TodoListTask from \"./TodoListTask\";\n\nclass TodoListTasks extends React.Component {\n    render = () => {\n\n        let tasksElements = this.props.tasks.map( task => <TodoListTask task={task}\n                                                                        changeStatus={this.props.changeStatus}\n                                                                        changeTitle={this.props.changeTitle}\n                                                                        deleteTask={this.props.deleteTask}\n                                                                        />);\n\n        return (\n            <div className=\"todoList-tasks\">\n                {tasksElements}\n            </div>\n        );\n    }\n}\n\nexport default TodoListTasks;\n\n","import React from 'react';\nimport '../src/App.css';\n\nclass TodoListFooter extends React.Component {\n\n    state = {\n        isHidden: false\n    }\n\n    onAllFilterClick = () => { this.props.changeFilter(\"All\"); }\n    onCompletedFilterClick = () => { this.props.changeFilter(\"Completed\"); }\n    onActiveFilterClick = () => { this.props.changeFilter(\"Active\"); }\n    onShowFiltersClick = () => { this.setState({isHidden: true}) }\n    onHideFiltersClick = () => { this.setState({isHidden: false}) }\n\n    render = (props) => {\n\n        let classForAll = this.props.filterValue === \"All\" ? \"filter-active\" : \"\";\n        let classForCompleted = this.props.filterValue === \"Completed\" ? \"filter-active\" : \"\";\n        let classForActive = this.props.filterValue === \"Active\" ? \"filter-active\" : \"\";\n\n        return (\n            <div className=\"todoList-footer\">\n                { !this.state.isHidden && <div>\n                     <button onClick={ this.onAllFilterClick } className={classForAll}>All</button>\n                     <button onClick={ this.onCompletedFilterClick } className={classForCompleted}>Completed</button>\n                     <button onClick={ this.onActiveFilterClick } className={classForActive}>Active</button>\n                  </div>\n                }\n                { !this.state.isHidden && <span onClick={ this.onShowFiltersClick }>hide</span> }\n                { this.state.isHidden && <span onClick={ this.onHideFiltersClick }>show</span> }\n            </div>\n        );\n    }\n}\n\nexport default TodoListFooter;\n\n","import React from 'react';\nimport './App.css';\n\n\nclass TodoListTitle extends React.Component {\n    state = {\n        editMode: false,\n        title: this.props.title\n    }\n    changeTitle = () => {\n\n        this.setState({editMode: true})\n    }\n    onTitleChange = (e)=>{\n\n        this.setState({title:e.currentTarget.value})\n    }\n    onTitleBlur = ()=>{\n        this.setState({editMode:false})\n        this.props.updateTodolistTitle(this.state.title)\n    }\n\n    render = () => {\n        return (\n            <div>\n                {\n                    this.state.editMode\n                        ? <input value ={this.state.title} onChange={this.onTitleChange} onBlur={this.onTitleBlur}/>\n                        : <div>\n                            <h3 className=\"todoList-header__title\" onClick={this.changeTitle} >{this.state.title}  </h3>\n                            <button onClick={this.props.onDelete}>X</button>\n                        </div>\n\n                }\n            </div>\n        );\n    }\n}\n\nexport default TodoListTitle;\n\n","import React from 'react';\nimport './App.css';\n\nclass AddNewItemForm extends React.Component {\n    state = {\n        error: false,\n        title: \"\"\n    }\n\n    onAddItemClick = () => {\n        let newText = this.state.title;\n        this.setState({title: \"\"});\n\n        if (newText === \"\") {\n            this.setState({error: true});\n        } else {\n            this.setState({error: false});\n            // передаём новый текст наружу\n            this.props.addItem(newText);\n        }\n    }\n\n    onTitleChanged = (e) => {\n        this.setState({\n            error: false,\n            title: e.currentTarget.value\n        });\n    }\n\n    onKeyPress = (e) => {\n        if (e.key === \"Enter\") {\n            this.onAddItemClick();\n        }\n    }\n\n\n    render = () => {\n        let classNameForInput = this.state.error ? \"error\" : \"\";\n\n        return (\n            <div className=\"todoList-newTaskForm\">\n                <input className={classNameForInput} type=\"text\" placeholder=\"New item name\"\n                       onChange={this.onTitleChanged}\n                       onKeyPress={this.onKeyPress}\n                       value={this.state.title}\n                />\n                <button onClick={this.onAddItemClick}>Add</button>\n            </div>\n\n        );\n    }\n}\n\nexport default AddNewItemForm;\n\n","export const ADD_TODOLIST = \"TodoList/Reducer/ADD-TODOLIST\";\r\nexport const DELETE_TODOLIST = \"TodoList/Reducer/DELETE-TODOLIST\";\r\nexport const DELETE_TASK = \"TodoList/Reducer/DELETE-TASK\";\r\nexport const ADD_TASK = \"TodoList/Reducer/ADD-TASK\";\r\nexport const UPDATE_TASK = \"TodoList/Reducer/UPDATE-TASK\";\r\nexport const SET_TODOLISTS = \"TodoList/Reducer/SET_TODOLISTS\"\r\nexport const SET_TASKS='TodoList/Reducer/SET_TASKS'\r\nexport const CHANGE_TODOLIST_TITLE='TodoList/Reducer/CHANGE_TODOLIST_TITLE'\r\nconst initialState = {\r\n    \"todolists\": [\r\n        // {\r\n        //     \"id\": 0, \"title\": \"every day\",\r\n        //     tasks: [\r\n        //         {\"title\": \"css11\", \"isDone\": false, \"priority\": \"low\", \"id\": 0},\r\n        //         {\"title\": \"js\", \"isDone\": false, \"priority\": \"low\", \"id\": 1},\r\n        //         {\"title\": \"react\", \"isDone\": false, \"priority\": \"low\", \"id\": 2},\r\n        //         {\"title\": \"sasasa\", \"isDone\": false, \"priority\": \"low\", \"id\": 3},\r\n        //         {\"title\": \"yoaa\", \"isDone\": false, \"priority\": \"low\", \"id\": 4},\r\n        //         {\"title\": \"sddsdsds\", \"isDone\": false, \"priority\": \"low\", \"id\": 5}]\r\n        // },\r\n        // {\"id\": 1, \"title\": \"tomorrow\", tasks: []},\r\n        // {\"id\": 2, \"title\": \"weewwe`\", tasks: []},\r\n        // {\"id\": 3, \"title\": \"dddd\", tasks: []}\r\n    ]\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_TASKS:\r\n\r\n            return {\r\n                ...state,\r\n                todolists: [...state.todolists.map(tl=>{\r\n                    if(tl.id === action.todolistId)  {\r\n                        return {...tl,tasks:action.tasks}\r\n                    } else{\r\n                    return tl}\r\n                })]\r\n            }\r\n        case ADD_TODOLIST:\r\n            return {\r\n                ...state,\r\n                todolists: [...state.todolists,action.newTodolist]\r\n            }\r\n        case SET_TODOLISTS:\r\n            return {\r\n                ...state,\r\n                todolists: action.todolists.map(tl=>{\r\n                    return {...tl,tasks:[]}\r\n                })\r\n            }\r\n        case DELETE_TODOLIST:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.filter(tl => tl.id != action.todolistId)\r\n            }\r\n        case DELETE_TASK:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {\r\n                            ...tl,\r\n                            tasks: tl.tasks.filter(t => t.id != action.taskId)\r\n                        }\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            }\r\n        case ADD_TASK:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {...tl, tasks: [...tl.tasks, action.newTask]}\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            }\r\n        case UPDATE_TASK:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {\r\n                            ...tl,\r\n                            tasks: tl.tasks.map(t => {\r\n                                if (t.id != action.taskId) {\r\n                                    return t;\r\n                                } else {\r\n                                    return {...t, ...action.obj};\r\n                                }\r\n                            })\r\n                        }\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            }\r\n        case CHANGE_TODOLIST_TITLE :\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl =>{\r\n                    if (tl.id === action.todoListId) {\r\n                        return {...tl, title:action.title}\r\n                    } else {\r\n                        return tl\r\n                    }\r\n        })\r\n            }\r\n\r\n    }\r\n    console.log(\"reducer: \", action);\r\n    return state;\r\n}\r\n\r\nexport const updateTaskAC = (taskId, obj, todolistId) => {\r\n    return { type: UPDATE_TASK, taskId, obj, todolistId };\r\n}\r\nexport const deleteTodolistAC = (todolistId) => {\r\n    return {\r\n        type: DELETE_TODOLIST,\r\n        todolistId: todolistId\r\n    };\r\n}\r\nexport const deleteTaskAC = (todolistId, taskId) => {\r\n    return {\r\n        type: DELETE_TASK,\r\n        todolistId,\r\n        taskId\r\n    };\r\n}\r\nexport const addTaskAC = (newTask, todolistId) => {\r\n    return { type: ADD_TASK, newTask, todolistId };\r\n}\r\nexport const addTodolistAC = (newTodolist) => {\r\n    return {\r\n        type: ADD_TODOLIST,\r\n        newTodolist: newTodolist\r\n    }\r\n}\r\nexport const setTodolistAC = (todolists)=> {\r\n    return {\r\n        type:SET_TODOLISTS,\r\n        todolists:todolists\r\n    }\r\n}\r\nexport const setTasksAC = (tasks,todolistId)=>{\r\n    return {\r\n        type:SET_TASKS,\r\n        tasks:tasks,\r\n        todolistId\r\n    }\r\n}\r\nexport const changeTodoListTitle =(todoListId,title)=>{\r\n    return {\r\n        type:CHANGE_TODOLIST_TITLE,\r\n        todoListId,\r\n        title\r\n    }\r\n}\r\n\r\nexport default reducer;\r\n","import axios from 'axios'\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.0/todo-lists\",\r\n    withCredentials: true,\r\n    headers: {'API-KEY': '8f9a9157-3f30-4705-bd4d-ae08502514a2'}\r\n});\r\n\r\nexport const api = {\r\n    createTask(newTaskTitle, todolistId) {\r\n        return instance.post(\r\n            `/${todolistId}/tasks`,\r\n            {title: newTaskTitle},\r\n        )\r\n    },\r\n    createTodolist(title) {\r\n        return instance.post(\r\n            '',\r\n            {title: title}\r\n        )\r\n    },\r\n    getTodolist() {\r\n        return instance.get('')\r\n    },\r\n    deleteTodolist(id) {\r\n        return instance.delete(`/${id}`)\r\n    },\r\n    deleteTask(id) {\r\n        return instance.delete(`tasks/${id}`)\r\n    },\r\n    updateTask(task) {\r\n        return instance.put('/tasks', task)\r\n    },\r\n    getTasks(todoListId) {\r\n        return instance.get(`/${todoListId}/tasks`,\r\n        )\r\n    },\r\n    updateTitleTodolist(todoListId,title){\r\n        return instance.put(`/${todoListId}`,{title:title})\r\n\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport TodoListTasks from \"./TodoListTasks\";\nimport TodoListFooter from \"./TodoListFooter\";\nimport TodoListTitle from \"./TodoListTitle\";\nimport AddNewItemForm from \"./AddNewItemForm\";\nimport {connect} from \"react-redux\";\nimport {addTaskAC, changeTodoListTitle, deleteTaskAC, deleteTodolistAC, setTasksAC, updateTaskAC} from \"./reducer\";\nimport axios from \"axios\";\nimport {api} from \"./api\";\n\n\nclass TodoList extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.newTasksTitileRef = React.createRef();\n\n    }\n\n    componentDidMount() {\n        this.restoreState();\n    }\n\n    saveState = () => {\n        let stateAsString = JSON.stringify(this.state);\n        localStorage.setItem(\"our-state-\" + this.props.id, stateAsString);\n    }\n\n    restoreState = () => {\n        api.getTasks(this.props.id)\n            .then(res => {\n                this.props.setTasks(res.data.items, this.props.id)\n            });\n    }\n\n    nextTaskId = 0;\n\n    state = {\n        tasks: [],\n        filterValue: \"All\"\n    };\n\n    addTask = (newText) => {\n        api.createTask(newText,this.props.id,)\n            .then(res => {\n                this.props.addTask(res.data.data.item, this.props.id)\n            })\n    }\n\n    changeFilter = (newFilterValue) => {\n        this.setState({\n            filterValue: newFilterValue\n        }, () => {\n            this.saveState();\n        });\n    }\n\n    changeTask = (taskId, obj) => {\n        let task = this.props.tasks.find(item => {\n            return taskId === item.id\n        });\n        let newTask = {...task, ...obj};\n        api.updateTask(newTask)\n            .then(res => {\n                this.props.updateTask(taskId, obj, this.props.id);\n            })\n            .catch(res => {\n            })\n        //\n    }\n\n    changeStatus = (taskId, status) => {\n        this.changeTask(taskId, {status});\n    }\n\n    changeTitle = (taskId, title) => {\n        this.changeTask(taskId, {title: title});\n    }\n\n    deleteTodolist = () => {\n        api.deleteTodolist(this.props.id)\n            .then(res => {\n                this.props.deleteTodolist(this.props.id)\n            })\n    }\n\n    deleteTask = (taskId) => {\n        api.deleteTask(taskId)\n            .then(res => {\n                this.props.deleteTask(taskId, this.props.id)\n            })\n    }\n    updateTodolistTitle =(title)=>{\n        api.updateTitleTodolist(this.props.id,title)\n            .then(res => {\n              this.props.changeTodoListTitle(this.props.id,title)\n            })\n    }\n\n    render = () => {\n        let {tasks = []} = this.props\n        return (\n            <div className=\"todoList\">\n                <div className=\"todoList-header\">\n                    <TodoListTitle title={this.props.title} onDelete={this.deleteTodolist} updateTodolistTitle={this.updateTodolistTitle}/>\n                    <AddNewItemForm addItem={this.addTask}/>\n\n                </div>\n\n                <TodoListTasks changeStatus={this.changeStatus}\n                               changeTitle={this.changeTitle}\n                               deleteTask={this.deleteTask}\n                               tasks={tasks.filter(t => {\n                                   if (this.state.filterValue === \"All\") {\n                                       return true;\n                                   }\n                                   if (this.state.filterValue === \"Active\") {\n                                       return t.status === 0;\n                                   }\n                                   if (this.state.filterValue === \"Completed\") {\n                                       return t.status === 2;\n                                   }\n                               })}/>\n                <TodoListFooter changeFilter={this.changeFilter} filterValue={this.state.filterValue}/>\n            </div>\n        );\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        addTask(newTask, todolistId) {\n\n            //const action = addTaskAC(newTask, todolistId);\n            dispatch(addTaskAC(newTask, todolistId));\n        },\n        updateTask(taskId, obj, todolistId) {\n            const action = updateTaskAC(taskId, obj, todolistId);\n            dispatch(action);\n        },\n        deleteTodolist: (todolistId) => {\n            const action = deleteTodolistAC(todolistId);\n            dispatch(action)\n        },\n        deleteTask: (taskId, todolistId) => {\n            const action = deleteTaskAC(todolistId, taskId);\n            dispatch(action)\n        },\n        setTasks(tasks, todolistId) {\n            dispatch(setTasksAC(tasks, todolistId))\n        },\n        changeTodoListTitle(todoListId,title){\n            dispatch(changeTodoListTitle(todoListId,title))\n        }\n    }\n}\n\nconst ConnectedTodolist = connect(null, mapDispatchToProps)(TodoList);\n\nexport default ConnectedTodolist;\n\n","import React from 'react';\nimport './App.css';\nimport TodoList from \"./TodoList\";\nimport AddNewItemForm from \"./AddNewItemForm\";\nimport {connect} from \"react-redux\";\nimport {ADD_TODOLIST, addTodolistAC, setTodolistAC} from \"./reducer\";\nimport {api} from \"./api\";\n\nclass App extends React.Component {\n\n\n    addTodoList = (title) => {\n        api.createTodolist(title)\n            .then(res => {\n                let todolist = res.data.data.item\n                this.props.addTodolist(todolist)\n            })\n    }\n\n    componentDidMount() {\n        this.restoreState();\n    }\n\n    saveState = () => {\n        let stateAsString = JSON.stringify(this.state);\n        localStorage.setItem(\"todolists-state\", stateAsString);\n    }\n\n    // restoreState = () => {\n    //     let state = this.state;\n    //     let stateAsString = localStorage.getItem(\"todolists-state\");\n    //     if (stateAsString != null) {\n    //         state = JSON.parse(stateAsString);\n    //     }\n    //     this.setState(state, () => {\n    //         this.state.todolists.forEach(t => {\n    //             if (t.id >= this.nextTodoListId) {\n    //                 this.nextTodoListId = t.id + 1;\n    //             }\n    //         })\n    //     });\n    // }\n    restoreState = () => {\n        api.getTodolist()\n            .then(res => {\n                this.props.setTodolists(res.data)\n            });\n    }\n\n\n    render = () => {\n        const todolists = this.props\n            .todolists\n            .map(tl => <TodoList id={tl.id} title={tl.title} tasks={tl.tasks}/>)\n\n        return (\n            <>\n                <div>\n                    <AddNewItemForm addItem={this.addTodoList}/>\n                </div>\n                <div className=\"App\">\n                    {todolists}\n                </div>\n            </>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        todolists: state.todolists\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        setTodolists: (todolists) => {\n            const action = setTodolistAC(todolists);\n            dispatch(action)\n        },\n        addTodolist: (newTodolist) => {\n            const action = addTodolistAC(newTodolist);\n            dispatch(action)\n        }\n    }\n}\n\nconst ConnectedApp = connect(mapStateToProps, mapDispatchToProps)(App);\nexport default ConnectedApp;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {createStore} from \"redux\";\r\nimport reducer from \"./reducer\";\r\n\r\nconst store = createStore(reducer);\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./store\";\nimport {Provider} from \"react-redux\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}